jar {
	afterEvaluate {
		manifest {
			attributes["Implementation-Title"] = project.name
			attributes["Implementation-Version"] = project.version
			attributes["Automatic-Module-Name"] = project.name.replace('-', '.')
			// for Jigsaw
			attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		}
	}
}

task sourcesJar(type: Jar) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

javadoc {
	options {
		encoding "UTF-8"
		charSet 'UTF-8'
		author true
		version true
		failOnError false
		links "http://docs.oracle.com/javase/8/docs/api"
	}
}

task javadocJar(type: Jar) {
	archiveClassifier.set('javadoc')
	from 'build/docs/javadoc'
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

publishing {
	repositories {
		maven {
			url = System.getenv('REPOSITORY_URL') ?: REPOSITORY_URL
		}
	}
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact sourcesJar
			artifact javadocJar

			pom {
				withXml {
					def root = asNode()
					root.dependencies.'*'.findAll {
						def d = it
						d.scope.text() == 'runtime' && project.configurations
								.findByName("implementation").allDependencies.find { dep ->
							dep.name == it.artifactId.text()
						}.each() {
							d.scope*.value = 'compile'
							d.appendNode('optional', true)
						}
					}
				}
			}
		}
	}
}


